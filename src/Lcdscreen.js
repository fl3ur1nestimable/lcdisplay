import React from "react";
import "./Lcdscreen.css";
import Pixel from "./Pixel";
import PixelB from "./PixelB";

class Lcdscreen extends React.Component{

    componentDidMount = () =>{
        this.updateScreen();
    }

    constructor(props){
        super(props);
        this.letters = {
            "A" : [
                [0,1,1,1,0,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [1,1,1,1,1,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0]
            ],
            "B" : [
                [1,1,1,1,0,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [1,1,1,1,0,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [1,1,1,1,0,0]
            ],
            "C" : [
                [0,1,1,1,0,0],
                [1,0,0,0,1,0],
                [1,0,0,0,0,0],
                [1,0,0,0,0,0],
                [1,0,0,0,0,0],
                [1,0,0,0,1,0],
                [0,1,1,1,0,0]
            ],
            "D" : [
                [1,1,1,0,0,0],
                [1,0,0,1,0,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [1,0,0,1,0,0],
                [1,1,1,0,0,0]
            ],
            "E" : [
                [1,1,1,1,1,0],
                [1,0,0,0,0,0],
                [1,0,0,0,0,0],
                [1,1,1,1,0,0],
                [1,0,0,0,0,0],
                [1,0,0,0,0,0],
                [1,1,1,1,1,0]
            ],
            "F" : [
                [1,1,1,1,1,0],
                [1,0,0,0,0,0],
                [1,0,0,0,0,0],
                [1,1,1,1,0,0],
                [1,0,0,0,0,0],
                [1,0,0,0,0,0],
                [1,0,0,0,0,0]
            ],
            "G" : [
                [0,1,1,1,0,0],
                [1,0,0,0,1,0],
                [1,0,0,0,0,0],
                [1,0,1,1,1,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [0,1,1,1,0,0]
            ],
            "H" : [
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [1,1,1,1,1,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0]
            ],
            "I" : [
                [0,1,1,1,0,0],
                [0,0,1,0,0,0],
                [0,0,1,0,0,0],
                [0,0,1,0,0,0],
                [0,0,1,0,0,0],
                [0,0,1,0,0,0],
                [0,1,1,1,0,0]
            ],
            "J" : [
                [0,0,1,1,1,0],
                [0,0,0,1,0,0],
                [0,0,0,1,0,0],
                [0,0,0,1,0,0],
                [0,0,0,1,0,0],
                [1,0,0,1,0,0],
                [0,1,1,0,0,0]
            ],
            "K" : [
                [1,0,0,0,1,0],
                [1,0,0,1,0,0],
                [1,0,1,0,0,0],
                [1,1,0,0,0,0],
                [1,0,1,0,0,0],
                [1,0,0,1,0,0],
                [1,0,0,0,1,0]
            ],
            "L" : [
                [1,0,0,0,0,0],
                [1,0,0,0,0,0],
                [1,0,0,0,0,0],
                [1,0,0,0,0,0],
                [1,0,0,0,0,0],
                [1,0,0,0,0,0],
                [1,1,1,1,1,0]
            ],
            "M" : [
                [1,0,0,0,1,0],
                [1,1,0,1,1,0],
                [1,0,1,0,1,0],
                [1,0,1,0,1,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0]
            ],
            "N" : [
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [1,1,0,0,1,0],
                [1,0,1,0,1,0],
                [1,0,0,1,1,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0]
            ],
            "O" : [
                [0,1,1,1,0,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [0,1,1,1,0,0]
            ],
            "P" : [
                [1,1,1,1,0,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [1,1,1,1,0,0],
                [1,0,0,0,0,0],
                [1,0,0,0,0,0],
                [1,0,0,0,0,0]
            ],
            "Q" : [
                [0,1,1,1,0,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [1,0,1,0,1,0],
                [1,0,0,1,0,0],
                [0,1,1,0,1,0]
            ],
            "R" : [
                [1,1,1,1,0,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [1,1,1,1,0,0],
                [1,0,1,0,0,0],
                [1,0,0,1,0,0],
                [1,0,0,0,1,0]
            ],
            "S" : [
                [0,1,1,1,1,0],
                [1,0,0,0,0,0],
                [1,0,0,0,0,0],
                [0,1,1,1,0,0],
                [0,0,0,0,1,0],
                [0,0,0,0,1,0],
                [1,1,1,1,0,0]
            ],
            "T" : [
                [1,1,1,1,1,0],
                [0,0,1,0,0,0],
                [0,0,1,0,0,0],
                [0,0,1,0,0,0],
                [0,0,1,0,0,0],
                [0,0,1,0,0,0],
                [0,0,1,0,0,0]
            ],
            "U" : [
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [0,1,1,1,0,0]
            ],
            "V" : [
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [0,1,0,1,0,0],
                [0,0,1,0,0,0]
            ],
            "W" : [
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [1,0,1,0,1,0],
                [1,0,1,0,1,0],
                [1,0,1,0,1,0],
                [0,1,0,1,0,0]
            ],
            "X" : [
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [0,1,0,1,0,0],
                [0,0,1,0,0,0],
                [0,1,0,1,0,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0]
            ],
            "Y" : [
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [1,0,0,0,1,0],
                [0,1,0,1,0,0],
                [0,0,1,0,0,0],
                [0,0,1,0,0,0],
                [0,0,1,0,0,0]
            ],
            "Z" : [
                [1,1,1,1,1,0],
                [0,0,0,0,1,0],
                [0,0,0,1,0,0],
                [0,0,1,0,0,0],
                [0,1,0,0,0,0],
                [1,0,0,0,0,0],
                [1,1,1,1,1,0]
            ] 
        };



        var SCREEN_WIDTH = 7;
        //var SCREEN_HEIGHT = 1;
        var LETTER_WIDTH = 6;
        var LETTER_HEIGHT = 7;
        var screen = new Array(SCREEN_WIDTH);
        for(var i = 0; i < SCREEN_WIDTH ; i++){
            screen[i] = new Array(LETTER_WIDTH);
        }

        for(var i = 0; i < SCREEN_WIDTH ; i++){
            for(var j = 0; j < LETTER_WIDTH ; j++){
                screen[i][j] = new Array(LETTER_HEIGHT);
            }
        }

        for(var i = 0; i < SCREEN_WIDTH ; i++){
            for(var j = 0; j < LETTER_WIDTH ; j++){
                for(var k = 0; k < LETTER_HEIGHT ; k++){
                    screen[i][j][k] = 0;
                }
            }
        }
            
        this.state={
            text : "HELLOW",
            screen : screen
        };
    }

    updateScreen = () =>{
        var textCap = this.state.text.toUpperCase().split('');
        var screen_copy = this.state.screen;
        var n = textCap.length;
        for(var i = 0; i < n; i++){
            screen_copy[i]=this.letters[textCap[i]];
        }
        this.setState({screen:screen_copy});
        console.log(this.state.screen);
    }


    render(){
        return(
            <div className="screen">
                {this.state.screen.map((letter,i) => (
                    <table key={i}>
                        <tbody>
                            {letter.map((row,j)=>(
                                <tr key={j}>
                                    {row.map((number,k)=>(
                                        <td key={k}>
                                            {   number===1 ? <Pixel/> : <PixelB/>
                                                //number===1 ? number : 0
                                            }
                                        </td>
                                    ))}
                                </tr>
                            ))}
                        </tbody>
                    </table>
                ))}
            </div>
        );
    }
}

export default Lcdscreen;